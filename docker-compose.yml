services:
  upload-service:
    build:
      context: .
      args:
        NODE_VERSION: ${NODE_VERSION:-18.17.0}
        NODE_VERSION_SHORT: ${NODE_VERSION_SHORT:-18}
    environment:
      NODE_ENV: ${NODE_ENV:-local}
      DB_HOST: upload-service-pg
      DB_PORT: 5432
      DB_PASSWORD: postgres
      PAYMENT_SERVICE_BASE_URL: ${PAYMENT_SERVICE_BASE_URL:-}
      MAX_DATA_ITEM_SIZE: ${MAX_DATA_ITEM_SIZE:-10737418240}
      ALLOW_LISTED_ADDRESSES: ${ALLOW_LISTED_ADDRESSES:-}
      AWS_ENDPOINT: ${AWS_ENDPOINT:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      SQS_PREPARE_BUNDLE_URL: ${SQS_PREPARE_BUNDLE_URL:-}
      SQS_FINALIZE_UPLOAD_URL: ${SQS_FINALIZE_UPLOAD_URL:-}
      SQS_OPTICAL_URL: ${SQS_OPTICAL_URL:-}
      SQS_NEW_DATA_ITEM_URL: ${SQS_NEW_DATA_ITEM_URL:-}
      SQS_UNBUNDLE_BDI_URL: ${SQS_UNBUNDLE_BDI_URL:-}
      OPTICAL_BRIDGING_ENABLED: ${OPTICAL_BRIDGING_ENABLED:-false}
      SKIP_BALANCE_CHECKS: ${SKIP_BALANCE_CHECKS:-true}
      DATA_ITEM_BUCKET: ${DATA_ITEM_BUCKET:-raw-data-items}
      DATA_ITEM_BUCKET_REGION: ${DATA_ITEM_BUCKET_REGION:-us-east-1}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-}
      AWS_REGION: ${AWS_REGION:-us-east-1}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    volumes:
      - upload-service-data-items:/temp
    depends_on:
      - upload-service-pg
      - fulfillment-service

  fulfillment-service:
    build:
      context: .
      dockerfile: Dockerfile.fulfillment
      args:
        NODE_VERSION: ${NODE_VERSION:-18.17.0}
        NODE_VERSION_SHORT: ${NODE_VERSION_SHORT:-18}
    environment:
      NODE_ENV: ${NODE_ENV:-local}
      DB_HOST: upload-service-pg
      DB_PORT: 5432
      DB_PASSWORD: postgres
      PORT: ${FULFILLMENT_PORT:-4000}
      AWS_ENDPOINT: ${AWS_ENDPOINT:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      SQS_PREPARE_BUNDLE_URL: ${SQS_PREPARE_BUNDLE_URL:-}
      SQS_POST_BUNDLE_URL: ${SQS_POST_BUNDLE_URL:-}
      SQS_SEED_BUNDLE_URL: ${SQS_SEED_BUNDLE_URL:-}
      SQS_FINALIZE_UPLOAD_URL: ${SQS_FINALIZE_UPLOAD_URL:-}
      SQS_OPTICAL_URL: ${SQS_OPTICAL_URL:-}
      SQS_NEW_DATA_ITEM_URL: ${SQS_NEW_DATA_ITEM_URL:-}
      SQS_UNBUNDLE_BDI_URL: ${SQS_UNBUNDLE_BDI_URL:-}
      PLAN_BUNDLE_ENABLED: ${PLAN_BUNDLE_ENABLED:-true}
      VERIFY_BUNDLE_ENABLED: ${VERIFY_BUNDLE_ENABLED:-true}
      OPTICAL_BRIDGING_ENABLED: ${OPTICAL_BRIDGING_ENABLED:-false}
      SKIP_BALANCE_CHECKS: ${SKIP_BALANCE_CHECKS:-true}
      DATA_ITEM_BUCKET: ${DATA_ITEM_BUCKET:-raw-data-items}
      DATA_ITEM_BUCKET_REGION: ${DATA_ITEM_BUCKET_REGION:-us-east-1}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      OVERDUE_DATA_ITEM_THRESHOLD_MS: ${OVERDUE_DATA_ITEM_THRESHOLD_MS:-0} # plan data items immediately into bundles when plan-bundle runs
    ports:
      - "${FULFILLMENT_PORT:-4000}:${FULFILLMENT_PORT:-4000}"

    depends_on:
      localstack:
        condition: service_healthy
      upload-service-pg:
        condition: service_started
      migrator-service:
        condition: service_started

  migrator-service:
    build:
      context: .
      dockerfile: Dockerfile.migration
      args:
        NODE_VERSION: ${NODE_VERSION:-18.17.0}
    environment:
      DB_HOST: upload-service-pg
      DB_PORT: 5432
      DB_PASSWORD: postgres
    depends_on:
      - upload-service-pg

  upload-service-pg:
    image: postgres:13.8
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - upload-service-data:/var/lib/postgresql/data

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack}"
    build:
      context: .
      dockerfile: Dockerfile.localstack
    ports:
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      #- "127.0.0.1:4510-4559:4510-4559" # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - SERVICES=${SERVICES:-s3,sqs,secretsmanager}
      - DEBUG=${DEBUG:-0} # set to 1 to enable debug mode
      - NODE_ENV=${NODE_ENV:-local}
      - ARWEAVE_WALLET=${ARWEAVE_WALLET:-}
      - TURBO_OPTICAL_KEY=${TURBO_OPTICAL_KEY:-$ARWEAVE_WALLET}
      - DATA_ITEM_BUCKET=${DATA_ITEM_BUCKET:-raw-data-items}
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/persisted-data"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 15s

  arlocal:
    profiles:
      - test
    image: textury/arlocal:v1.1.35
    ports:
      - "1984:1984"

  test-runner:
    profiles:
      - test
    build:
      context: .
      dockerfile: tests/integration.Dockerfile
      args:
        NODE_VERSION: ${NODE_VERSION:-18.17.0}
    environment:
      DB_HOST: upload-service-pg
      DB_PASSWORD: postgres
      DB_PORT: 5432
      DISABLE_LOGS: ${DISABLE_LOGS:-true}
      NODE_ENV: ${NODE_ENV:-test}
      ARWEAVE_GATEWAY: ${ARWEAVE_GATEWAY:-http://arlocal:1984}
      AWS_ENDPOINT: ${AWS_ENDPOINT:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      SQS_PREPARE_BUNDLE_URL: ${SQS_PREPARE_BUNDLE_URL:-}
      SQS_POST_BUNDLE_URL: ${SQS_POST_BUNDLE_URL:-}
      SQS_SEED_BUNDLE_URL: ${SQS_SEED_BUNDLE_URL:-}
      SQS_FINALIZE_UPLOAD_URL: ${SQS_FINALIZE_UPLOAD_URL:-}
      SQS_OPTICAL_URL: ${SQS_OPTICAL_URL:-}
      SQS_NEW_DATA_ITEM_URL: ${SQS_NEW_DATA_ITEM_URL:-}
      SQS_UNBUNDLE_BDI_URL: ${SQS_UNBUNDLE_BDI_URL:-}
      DATA_ITEM_BUCKET: ${DATA_ITEM_BUCKET:-raw-data-items}
      DATA_ITEM_BUCKET_REGION: ${DATA_ITEM_BUCKET_REGION:-us-east-1}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-}
    depends_on:
      localstack:
        condition: service_healthy
      upload-service-pg:
        condition: service_started
      arlocal:
        condition: service_started

volumes:
  upload-service-data:
  upload-service-data-items:
